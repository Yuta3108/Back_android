const db = require('../db');

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
exports.getAllOrders = (req, res) => {
    const sql = 'SELECT * FROM donhang ORDER BY madonhang DESC';
    db.query(sql, (err, results) => {
        if (err) {
            console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", err);
            return res.status(500).json({ message: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng' });
        }
        res.json(results);
    });
};

// Th√™m m·ªôt ƒë∆°n h√†ng m·ªõi
exports.createOrder = (req, res) => {
    const { tongtien, ghichu, phuongthucthanhtoan, soluong } = req.body;
    const ngaydat = new Date().toISOString().slice(0, 10); // yyyy-mm-dd
    const trangthai = 'choxuly';

    if (!tongtien || !phuongthucthanhtoan || !soluong) {
        return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc' });
    }

    const sql = `
        INSERT INTO donhang (ngaydat, tongtien, trangthai, ghichu, phuongthucthanhtoan, soluong)
        VALUES (?, ?, ?, ?, ?, ?)
    `;
    const values = [ngaydat, tongtien, trangthai, ghichu || '', phuongthucthanhtoan, soluong];

    db.query(sql, values, (err, result) => {
        if (err) {
            console.error("L·ªói khi th√™m ƒë∆°n h√†ng:", err);
            return res.status(500).json({ message: 'L·ªói server khi th√™m ƒë∆°n h√†ng' });
        }

        res.status(201).json({ message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng', id: result.insertId });
    });
};

// X√≥a ƒë∆°n h√†ng theo ID
exports.deleteOrder = (req, res) => {
    const { id } = req.params;

    const sql = 'DELETE FROM donhang WHERE madonhang = ?';
    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error("L·ªói khi x√≥a ƒë∆°n h√†ng:", err);
            return res.status(500).json({ message: 'L·ªói server khi x√≥a ƒë∆°n h√†ng' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ x√≥a' });
        }

        res.json({ message: 'X√≥a ƒë∆°n h√†ng th√†nh c√¥ng' });
    });
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (c√≥ ƒëi·ªÅu ki·ªán)
exports.updateOrderStatus = (req, res) => {
    const { id } = req.params;
    const { trangthai } = req.body;

    if (!trangthai) {
        return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p tr·∫°ng th√°i m·ªõi' });
    }

    const sqlSelect = 'SELECT trangthai FROM donhang WHERE madonhang = ?';
    db.query(sqlSelect, [id], (err, results) => {
        if (err) {
            console.error('L·ªói khi truy v·∫•n ƒë∆°n h√†ng:', err);
            return res.status(500).json({ message: 'L·ªói server khi truy v·∫•n ƒë∆°n h√†ng' });
        }

        if (results.length === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }

        const currentStatus = results[0].trangthai;

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán kh√¥ng cho quay l·∫°i "choxuly"
        if (currentStatus === 'dathanhcong' && trangthai === 'choxuly') {
            return res.status(400).json({ message: 'Kh√¥ng th·ªÉ s·ª≠a tr·∫°ng th√°i v·ªÅ "ch·ªù x·ª≠ l√Ω" n·∫øu ƒë∆°n h√†ng ƒë√£ th√†nh c√¥ng' });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        const sqlUpdate = 'UPDATE donhang SET trangthai = ? WHERE madonhang = ?';
        db.query(sqlUpdate, [trangthai, id], (err) => {
            if (err) {
                console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', err);
                return res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng' });
            }

            res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng' });
        });
    });
};

// X√≥a chi ti·∫øt ƒë∆°n h√†ng theo machitiet
exports.deleteOrderDetail = (req, res) => {
    const { id } = req.params;

    const sql = 'DELETE FROM chitietdonhang WHERE machitiet = ?';
    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error('L·ªói khi x√≥a chi ti·∫øt ƒë∆°n h√†ng:', err);
            return res.status(500).json({ message: 'L·ªói server khi x√≥a chi ti·∫øt ƒë∆°n h√†ng' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ x√≥a' });
        }

        res.json({ message: 'X√≥a chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng' });
    });
};

// üì¶ Th·ªëng k√™ ƒë∆°n h√†ng
exports.getOrderStats = (req, res) => {
    const sqlGeneral = `
        SELECT 
            COUNT(*) AS total_orders,
            SUM(tongtien) AS total_revenue,
            AVG(tongtien) AS average_order_value,
            MAX(tongtien) AS max_order_value,
            MIN(tongtien) AS min_order_value
        FROM donhang;
    `;

    const sqlByStatus = `
        SELECT trangthai, COUNT(*) AS count
        FROM donhang
        GROUP BY trangthai;
    `;

    const sqlByPayment = `
        SELECT phuongthucthanhtoan, COUNT(*) AS count
        FROM donhang
        GROUP BY phuongthucthanhtoan;
    `;

    db.query(sqlGeneral, (err1, generalStats) => {
        if (err1) {
            console.error('L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng:', err1);
            return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ ƒë∆°n h√†ng' });
        }

        db.query(sqlByStatus, (err2, statusStats) => {
            if (err2) {
                console.error('L·ªói th·ªëng k√™ theo tr·∫°ng th√°i:', err2);
                return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ tr·∫°ng th√°i ƒë∆°n h√†ng' });
            }

            db.query(sqlByPayment, (err3, paymentStats) => {
                if (err3) {
                    console.error('L·ªói th·ªëng k√™ ph∆∞∆°ng th·ª©c thanh to√°n:', err3);
                    return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ ph∆∞∆°ng th·ª©c thanh to√°n' });
                }

                res.status(200).json({
                    data: {
                        ...generalStats[0],
                        byStatus: statusStats,
                        byPayment: paymentStats
                    }
                });
            });
        });
    });
};

