const db = require('../db');

// L·∫•y danh s√°ch s·∫£n ph·∫©m
exports.getAllProducts = (req, res) => {
    const sql = 'SELECT * FROM products';
    db.query(sql, (err, results) => {
        if (err) {
            console.error("L·ªói truy v·∫•n:", err);
            return res.status(500).json({ message: 'L·ªói server' });
        }
        res.json(results);
    });
};
// th√™m 1 s·∫£n ph·∫©m m·ªõi v√†o b·∫£ng
// exports.addProduct = (req, res) => {
//     const { name, price, category_id, img } = req.body;

//     if (!name || !price || !category_id) {
//         return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m' });
//     }

//     const sql = 'INSERT INTO products (name, price, category_id, img) VALUES (?, ?, ?, ?)';
//     db.query(sql, [name, price, category_id, img || null], (err, result) => {
//         if (err) {
//             console.error(' L·ªói th√™m s·∫£n ph·∫©m:', err);
//             return res.status(500).json({ message: 'L·ªói server khi th√™m s·∫£n ph·∫©m' });
//         }

//         res.status(201).json({ message: ' Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!', productId: result.insertId });
//     });
// };
//X√≥a 1 s·∫£n ph·∫©m d·ª±a theo id
exports.deleteProduct = (req, res) => {
    const productId = req.params.id;

    const sql = 'DELETE FROM products WHERE id = ?';
    db.query(sql, [productId], (err, result) => {
        if (err) {
            console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', err);
            return res.status(500).json({ message: 'L·ªói server khi x√≥a s·∫£n ph·∫©m' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a' });
        }

        res.json({ message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!' });
    });
};

//Update s·∫£n ph·∫©m theo id
// exports.updateProduct = (req, res) => {
//     const productId = req.params.id;
//     const { name, price, category_id, img } = req.body;

//     if (!name || !price || !category_id) {
//         return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t' });
//     }

//     const sql = `
//         UPDATE products 
//         SET name = ?, price = ?, category_id = ?, img = ?
//         WHERE id = ?
//     `;

//     db.query(sql, [name, price, category_id, img || null, productId], (err, result) => {
//         if (err) {
//             console.error(' L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', err);
//             return res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m' });
//         }

//         if (result.affectedRows === 0) {
//             return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t' });
//         }

//         res.json({ message: ' C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!' });
//     });
// };

// üìä Th·ªëng k√™ s·∫£n ph·∫©m
exports.getProductStats = (req, res) => {
    const sql = `
        SELECT 
            COUNT(*) AS total_products,
            SUM(price) AS total_price,
            AVG(price) AS average_price,
            MAX(price) AS max_price,
            MIN(price) AS min_price
        FROM products;
    `;

    const sqlByCategory = `
        SELECT category_id, COUNT(*) AS count
        FROM products
        GROUP BY category_id;
    `;

    // Th·ª±c hi·ªán 2 truy v·∫•n song song
    db.query(sql, (err1, statsResult) => {
        if (err1) {
            console.error("L·ªói th·ªëng k√™ s·∫£n ph·∫©m:", err1.message);
            return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ s·∫£n ph·∫©m' });
        }

        db.query(sqlByCategory, (err2, categoryCounts) => {
            if (err2) {
                console.error("L·ªói th·ªëng k√™ theo danh m·ª•c:", err2.message);
                return res.status(500).json({ message: 'L·ªói server khi th·ªëng k√™ danh m·ª•c s·∫£n ph·∫©m' });
            }

            res.status(200).json({
                data: {
                    ...statsResult[0], // Th·ªëng k√™ chung
                    byCategory: categoryCounts // Th·ªëng k√™ theo danh m·ª•c
                }
            });
        });
    });
};
// API l·∫•y t·∫•t c·∫£ c·ªßa product (m√£, t√™n s·∫£n ph·∫©m, t√™n lo·∫°i, t√™n size, gi√° theo size)
exports.getProductListWithSizes = (req, res) => {
    const sql = `
        SELECT 
            p.id AS product_id,
            p.name AS product_name,
            p.img AS image,
            c.name AS category_name,
            s.size AS size_name,
            gs.gia AS price
        FROM 
            products p
        JOIN 
            categories c ON p.category_id = c.id
        JOIN 
            sizeproduct msp ON p.id = msp.masanpham
        JOIN 
            sizesanpham s ON msp.masize = s.masize
        JOIN 
            giasize gs ON p.id = gs.masanpham AND s.masize = gs.masize
        ORDER BY 
            p.id, s.masize;
    `;

    db.query(sql, (err, result) => {
        if (err) {
            console.error("L·ªói khi truy v·∫•n s·∫£n ph·∫©m c√≥ size:", err.message);
            return res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch s·∫£n ph·∫©m' });
        }

        res.status(200).json({
            message: "L·∫•y danh s√°ch s·∫£n ph·∫©m k√®m size th√†nh c√¥ng",
            data: result
        });
    });
};


// API th√™m product (m√£, t√™n s·∫£n ph·∫©m, t√™n lo·∫°i, t√™n size, gi√° theo size)
exports.addProductWithSizes = (req, res) => {
    const { name, category_id, sizes } = req.body;

    const sizesParsed = typeof sizes === 'string' ? JSON.parse(sizes) : sizes;

    if (!name || !category_id || !sizesParsed || !Array.isArray(sizesParsed)) {
        return res.status(400).json({ message: 'D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá' });
    }

    const insertProductSQL = `
        INSERT INTO products (name, category_id) VALUES (?, ?)
    `;

    db.query(insertProductSQL, [name, category_id], (err, productResult) => {
        if (err) {
            console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", err.message);
            return res.status(500).json({ message: 'L·ªói khi th√™m s·∫£n ph·∫©m' });
        }

        const masanpham = productResult.insertId;

        const sizeproductValues = sizesParsed.map(s => [masanpham, s.masize]);
        const giasizeValues = sizesParsed.map(s => [masanpham, s.masize, s.gia]);

        const insertSizeProductSQL = `
            INSERT INTO sizeproduct (masanpham, masize) VALUES ?
        `;
        const insertGiaSizeSQL = `
            INSERT INTO giasize (masanpham, masize, gia) VALUES ?
        `;

        db.query(insertSizeProductSQL, [sizeproductValues], (err1) => {
            if (err1) {
                console.error("L·ªói khi th√™m v√†o sizeproduct:", err1.message);
                return res.status(500).json({ message: 'L·ªói khi th√™m size s·∫£n ph·∫©m' });
            }

            db.query(insertGiaSizeSQL, [giasizeValues], (err2) => {
                if (err2) {
                    console.error("L·ªói khi th√™m v√†o giasize:", err2.message);
                    return res.status(500).json({ message: 'L·ªói khi th√™m gi√° theo size' });
                }

                return res.status(201).json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng' });
            });
        });
    });
};

//API th√™m 1 gi√° m·ªõi cho 1 size c·ªßa 1 s·∫£n ph·∫©m ƒë√£ c√≥ s·∫µn  
exports.addSizeToExistingProduct = (req, res) => {
    const { masize, gia } = req.body;
    const masanpham = req.params.id;

    if (!masize || !gia) {
        return res.status(400).json({ message: 'Thi·∫øu masize ho·∫∑c gi√°' });
    }

    // B1: Th√™m v√†o b·∫£ng sizeproduct
    const insertSizeProduct = `INSERT INTO sizeproduct (masanpham, masize) VALUES (?, ?)`;
    db.query(insertSizeProduct, [masanpham, masize], (err1) => {
        if (err1) {
            console.error('L·ªói khi th√™m size s·∫£n ph·∫©m:', err1);
            return res.status(500).json({ message: 'L·ªói khi th√™m size s·∫£n ph·∫©m' });
        }

        // B2: Th√™m v√†o b·∫£ng giasize
        const insertGiaSize = `INSERT INTO giasize (masanpham, masize, gia) VALUES (?, ?, ?)`;
        db.query(insertGiaSize, [masanpham, masize, gia], (err2) => {
            if (err2) {
                console.error('L·ªói khi th√™m gi√° size:', err2);
                return res.status(500).json({ message: 'L·ªói khi th√™m gi√° size' });
            }

            return res.status(201).json({ message: 'Th√™m size v√† gi√° th√†nh c√¥ng' });
        });
    });
};


// API c·∫≠p nh·∫≠t s·∫£n ph·∫©m k√®m size v√† gi√° theo size
exports.updateProductWithSizes = (req, res) => {
    const { name, category_id, sizes } = req.body;
    const { id } = req.params;

    let sizesParsed;
    try {
        sizesParsed = typeof sizes === 'string' ? JSON.parse(sizes) : sizes;
    } catch (error) {
        console.error("‚ùå L·ªói parse JSON 'sizes':", error.message);
        return res.status(400).json({ message: 'D·ªØ li·ªáu size kh√¥ng h·ª£p l·ªá' });
    }


    if (!name || !category_id || !sizesParsed || !Array.isArray(sizesParsed)) {
        return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t' });
    }

    const updateProductSQL = `UPDATE products SET name = ?, category_id = ? WHERE id = ?`;

    db.query(updateProductSQL, [name, category_id, id], (err1) => {
        if (err1) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err1.message);
            return res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m' });
        }

        const masizeList = sizesParsed.map(s => s.masize);
        if (masizeList.length === 0) {
            return res.status(400).json({ message: 'Danh s√°ch size tr·ªëng' });
        }

        // Ph·∫£i x√≥a b·∫£ng giasize tr∆∞·ªõc, r·ªìi m·ªõi x√≥a b·∫£ng sizeproduct
        const deleteGiaSizeSQL = `DELETE FROM giasize WHERE masanpham = ?`;
        const deleteSizeProductSQL = `DELETE FROM sizeproduct WHERE masanpham = ?`;

        db.query(deleteGiaSizeSQL, [id], (err2) => {
            if (err2) return res.status(500).json({ message: 'L·ªói khi xo√° gi√° size c≈©' });

            db.query(deleteSizeProductSQL, [id], (err3) => {
                if (err3) return res.status(500).json({ message: 'L·ªói khi xo√° size s·∫£n ph·∫©m c≈©' });

                // Th√™m size v√† gi√° m·ªõi
                const sizeproductValues = sizesParsed.map(s => [id, s.masize]);
                const giasizeValues = sizesParsed.map(s => [id, s.masize, s.gia]);

                const insertSizeSQL = `INSERT INTO sizeproduct (masanpham, masize) VALUES ?`;
                const insertGiaSQL = `INSERT INTO giasize (masanpham, masize, gia) VALUES ?`;

                db.query(insertSizeSQL, [sizeproductValues], (err4) => {
                    if (err4) return res.status(500).json({ message: 'L·ªói khi th√™m size m·ªõi' });

                    db.query(insertGiaSQL, [giasizeValues], (err5) => {
                        if (err5) return res.status(500).json({ message: 'L·ªói khi th√™m gi√° size m·ªõi' });

                        return res.status(200).json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng' });
                    });
                });
            });
        });
    });
};

// Xo√° s·∫£n ph·∫©m theo ID, k√®m xo√° size v√† gi√° theo size
exports.deleteProductWithSizes = (req, res) => {
    const { id } = req.params;

    if (!id) {
        return res.status(400).json({ message: 'Thi·∫øu ID s·∫£n ph·∫©m c·∫ßn xo√°' });
    }

    // B∆∞·ªõc 1: Xo√° b·∫£ng giasize ‚Üí sizeproduct ‚Üí products (ƒë√∫ng th·ª© t·ª± kho√° ngo·∫°i)
    const deleteGiaSizeSQL = `DELETE FROM giasize WHERE masanpham = ?`;
    const deleteSizeProductSQL = `DELETE FROM sizeproduct WHERE masanpham = ?`;
    const deleteProductSQL = `DELETE FROM products WHERE id = ?`;

    db.query(deleteGiaSizeSQL, [id], (err1) => {
        if (err1) {
            console.error('‚ùå L·ªói khi xo√° b·∫£ng giasize:', err1.message);
            return res.status(500).json({ message: 'L·ªói khi xo√° gi√° theo size' });
        }

        db.query(deleteSizeProductSQL, [id], (err2) => {
            if (err2) {
                console.error('‚ùå L·ªói khi xo√° b·∫£ng sizeproduct:', err2.message);
                return res.status(500).json({ message: 'L·ªói khi xo√° size s·∫£n ph·∫©m' });
            }

            db.query(deleteProductSQL, [id], (err3) => {
                if (err3) {
                    console.error('‚ùå L·ªói khi xo√° b·∫£ng products:', err3.message);
                    return res.status(500).json({ message: 'L·ªói khi xo√° s·∫£n ph·∫©m ch√≠nh' });
                }

                return res.status(200).json({ message: 'ƒê√£ xo√° s·∫£n ph·∫©m v√† c√°c size/gi√° li√™n quan th√†nh c√¥ng' });
            });
        });
    });
};

// API xo√° 1 size kh·ªèi s·∫£n ph·∫©m
exports.deleteSizeFromProduct = (req, res) => {
    const { productId, sizeId } = req.params;

    // B1: T√¨m sizeproduct c·∫ßn xo√°
    const findSizeProduct = `SELECT masizeproduct FROM sizeproduct WHERE masanpham = ? AND masize = ?`;
    db.query(findSizeProduct, [productId, sizeId], (err1, result1) => {
        if (err1) {
            console.error('L·ªói truy v·∫•n sizeproduct:', err1);
            return res.status(500).json({ message: 'L·ªói truy v·∫•n sizeproduct' });
        }

        if (result1.length === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y size n√†y trong s·∫£n ph·∫©m' });
        }

        const sizeProductId = result1[0].masizeproduct;

        // B2: Xo√° gi√° trong b·∫£ng giasize
        const deleteGia = `DELETE FROM giasize WHERE sizeproduct_id = ?`;
        db.query(deleteGia, [sizeProductId], (err2) => {
            if (err2) {
                console.error('L·ªói xo√° giasize:', err2);
                return res.status(500).json({ message: 'L·ªói xo√° gi√° size' });
            }

            // B3: Xo√° d√≤ng trong b·∫£ng sizeproduct
            const deleteSizeProduct = `DELETE FROM sizeproduct WHERE masizeproduct = ?`;
            db.query(deleteSizeProduct, [sizeProductId], (err3) => {
                if (err3) {
                    console.error('L·ªói xo√° sizeproduct:', err3);
                    return res.status(500).json({ message: 'L·ªói xo√° size kh·ªèi s·∫£n ph·∫©m' });
                }

                return res.json({ message: 'Xo√° size kh·ªèi s·∫£n ph·∫©m th√†nh c√¥ng' });
            });
        });
    });
};
