const db = require('../db');

// Láº¥y danh sÃ¡ch sáº£n pháº©m
exports.getAllProducts = (req, res) => {
    const sql = 'SELECT * FROM products';
    db.query(sql, (err, results) => {
        if (err) {
            console.error("Lá»—i truy váº¥n:", err);
            return res.status(500).json({ message: 'Lá»—i server' });
        }
        res.json(results);
    });
};
// thÃªm 1 sáº£n pháº©m má»›i vÃ o báº£ng
// exports.addProduct = (req, res) => {
//     const { name, price, category_id, img } = req.body;

//     if (!name || !price || !category_id) {
//         return res.status(400).json({ message: 'Vui lÃ²ng nháº­p Ä‘áº§y Ä‘á»§ thÃ´ng tin sáº£n pháº©m' });
//     }

//     const sql = 'INSERT INTO products (name, price, category_id, img) VALUES (?, ?, ?, ?)';
//     db.query(sql, [name, price, category_id, img || null], (err, result) => {
//         if (err) {
//             console.error(' Lá»—i thÃªm sáº£n pháº©m:', err);
//             return res.status(500).json({ message: 'Lá»—i server khi thÃªm sáº£n pháº©m' });
//         }

//         res.status(201).json({ message: ' ThÃªm sáº£n pháº©m thÃ nh cÃ´ng!', productId: result.insertId });
//     });
// };
//XÃ³a 1 sáº£n pháº©m dá»±a theo id
exports.deleteProduct = (req, res) => {
    const productId = req.params.id;

    const sql = 'DELETE FROM products WHERE id = ?';
    db.query(sql, [productId], (err, result) => {
        if (err) {
            console.error('Lá»—i khi xÃ³a sáº£n pháº©m:', err);
            return res.status(500).json({ message: 'Lá»—i server khi xÃ³a sáº£n pháº©m' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m Ä‘á»ƒ xÃ³a' });
        }

        res.json({ message: 'XÃ³a sáº£n pháº©m thÃ nh cÃ´ng!' });
    });
};

//Update sáº£n pháº©m theo id
exports.updateProduct = (req, res) => {
    const productId = req.params.id;
    const { name, price, category_id, img } = req.body;

    if (!name || !price || !category_id) {
        return res.status(400).json({ message: 'Vui lÃ²ng nháº­p Ä‘áº§y Ä‘á»§ thÃ´ng tin cáº§n cáº­p nháº­t' });
    }

    const sql = `
        UPDATE products 
        SET name = ?, price = ?, category_id = ?, img = ?
        WHERE id = ?
    `;

    db.query(sql, [name, price, category_id, img || null, productId], (err, result) => {
        if (err) {
            console.error(' Lá»—i cáº­p nháº­t sáº£n pháº©m:', err);
            return res.status(500).json({ message: 'Lá»—i server khi cáº­p nháº­t sáº£n pháº©m' });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m Ä‘á»ƒ cáº­p nháº­t' });
        }

        res.json({ message: ' Cáº­p nháº­t sáº£n pháº©m thÃ nh cÃ´ng!' });
    });
};

// ğŸ“Š Thá»‘ng kÃª sáº£n pháº©m
exports.getProductStats = (req, res) => {
    const sql = `
        SELECT 
            COUNT(*) AS total_products,
            SUM(price) AS total_price,
            AVG(price) AS average_price,
            MAX(price) AS max_price,
            MIN(price) AS min_price
        FROM products;
    `;

    const sqlByCategory = `
        SELECT category_id, COUNT(*) AS count
        FROM products
        GROUP BY category_id;
    `;

    // Thá»±c hiá»‡n 2 truy váº¥n song song
    db.query(sql, (err1, statsResult) => {
        if (err1) {
            console.error("Lá»—i thá»‘ng kÃª sáº£n pháº©m:", err1.message);
            return res.status(500).json({ message: 'Lá»—i server khi thá»‘ng kÃª sáº£n pháº©m' });
        }

        db.query(sqlByCategory, (err2, categoryCounts) => {
            if (err2) {
                console.error("Lá»—i thá»‘ng kÃª theo danh má»¥c:", err2.message);
                return res.status(500).json({ message: 'Lá»—i server khi thá»‘ng kÃª danh má»¥c sáº£n pháº©m' });
            }

            res.status(200).json({
                data: {
                    ...statsResult[0], // Thá»‘ng kÃª chung
                    byCategory: categoryCounts // Thá»‘ng kÃª theo danh má»¥c
                }
            });
        });
    });
};
// API láº¥y táº¥t cáº£ cá»§a product (mÃ£, tÃªn sáº£n pháº©m, tÃªn loáº¡i, tÃªn size, giÃ¡ theo size)
exports.getProductListWithSizes = (req, res) => {
    const sql = `
        SELECT 
            p.id AS product_id,
            p.name AS product_name,
            p.img AS image,
            c.name AS category_name,
            s.size AS size_name,
            gs.gia AS price
        FROM 
            products p
        JOIN 
            categories c ON p.category_id = c.id
        JOIN 
            sizeproduct msp ON p.id = msp.masanpham
        JOIN 
            sizesanpham s ON msp.masize = s.masize
        JOIN 
            giasize gs ON p.id = gs.masanpham AND s.masize = gs.masize
        ORDER BY 
            p.id, s.masize;
    `;

    db.query(sql, (err, result) => {
        if (err) {
            console.error("Lá»—i khi truy váº¥n sáº£n pháº©m cÃ³ size:", err.message);
            return res.status(500).json({ message: 'Lá»—i server khi láº¥y danh sÃ¡ch sáº£n pháº©m' });
        }

        res.status(200).json({
            message: "Láº¥y danh sÃ¡ch sáº£n pháº©m kÃ¨m size thÃ nh cÃ´ng",
            data: result
        });
    });
};


// API thÃªm product (mÃ£, tÃªn sáº£n pháº©m, tÃªn loáº¡i, tÃªn size, giÃ¡ theo size)
exports.addProductWithSizes = (req, res) => {
    const { name, category_id, sizes } = req.body;

    const sizesParsed = typeof sizes === 'string' ? JSON.parse(sizes) : sizes;

    if (!name || !category_id || !sizesParsed || !Array.isArray(sizesParsed)) {
        return res.status(400).json({ message: 'Dá»¯ liá»‡u gá»­i lÃªn khÃ´ng há»£p lá»‡' });
    }

    const insertProductSQL = `
        INSERT INTO products (name, category_id) VALUES (?, ?)
    `;

    db.query(insertProductSQL, [name, category_id], (err, productResult) => {
        if (err) {
            console.error("Lá»—i khi thÃªm sáº£n pháº©m:", err.message);
            return res.status(500).json({ message: 'Lá»—i khi thÃªm sáº£n pháº©m' });
        }

        const masanpham = productResult.insertId;

        const sizeproductValues = sizesParsed.map(s => [masanpham, s.masize]);
        const giasizeValues = sizesParsed.map(s => [masanpham, s.masize, s.gia]);

        const insertSizeProductSQL = `
            INSERT INTO sizeproduct (masanpham, masize) VALUES ?
        `;
        const insertGiaSizeSQL = `
            INSERT INTO giasize (masanpham, masize, gia) VALUES ?
        `;

        db.query(insertSizeProductSQL, [sizeproductValues], (err1) => {
            if (err1) {
                console.error("Lá»—i khi thÃªm vÃ o sizeproduct:", err1.message);
                return res.status(500).json({ message: 'Lá»—i khi thÃªm size sáº£n pháº©m' });
            }

            db.query(insertGiaSizeSQL, [giasizeValues], (err2) => {
                if (err2) {
                    console.error("Lá»—i khi thÃªm vÃ o giasize:", err2.message);
                    return res.status(500).json({ message: 'Lá»—i khi thÃªm giÃ¡ theo size' });
                }

                return res.status(201).json({ message: 'ThÃªm sáº£n pháº©m thÃ nh cÃ´ng' });
            });
        });
    });
};
//API thÃªm 1 giÃ¡ má»›i cho 1 size cá»§a 1 sáº£n pháº©m Ä‘Ã£ cÃ³ sáºµn  

exports.addSizeToExistingProduct = (req, res) => {
    const { masize, gia } = req.body;
    const masanpham = req.params.id;

    if (!masize || !gia) {
        return res.status(400).json({ message: 'Thiáº¿u masize hoáº·c giÃ¡' });
    }

    // B1: ThÃªm vÃ o báº£ng sizeproduct
    const insertSizeProduct = `INSERT INTO sizeproduct (masanpham, masize) VALUES (?, ?)`;
    db.query(insertSizeProduct, [masanpham, masize], (err1) => {
        if (err1) {
            console.error('Lá»—i khi thÃªm size sáº£n pháº©m:', err1);
            return res.status(500).json({ message: 'Lá»—i khi thÃªm size sáº£n pháº©m' });
        }

        // B2: ThÃªm vÃ o báº£ng giasize
        const insertGiaSize = `INSERT INTO giasize (masanpham, masize, gia) VALUES (?, ?, ?)`;
        db.query(insertGiaSize, [masanpham, masize, gia], (err2) => {
            if (err2) {
                console.error('Lá»—i khi thÃªm giÃ¡ size:', err2);
                return res.status(500).json({ message: 'Lá»—i khi thÃªm giÃ¡ size' });
            }

            return res.status(201).json({ message: 'ThÃªm size vÃ  giÃ¡ thÃ nh cÃ´ng' });
        });
    });
};

